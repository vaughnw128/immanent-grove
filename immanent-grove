#!/bin/bash
set -euo pipefail

function step {
  printf "### $* ###\n"
}

function plan {
  step 'terraform plan'

  # Update helm charts
  helm dependency update cluster/charts/cilium --skip-refresh
  helm dependency update cluster/charts/democratic-csi --skip-refresh
  helm dependency update cluster/charts/argocd --skip-refresh

  terraform plan
}

function apply {
  step 'terraform apply'

  rm -rf ./secrets/cluster-keys.json

  # Update helm charts
  helm dependency update cluster/charts/cilium --skip-refresh
  helm dependency update cluster/charts/democratic-csi --skip-refresh
  helm dependency update cluster/charts/argocd --skip-refresh

  terraform apply -auto-approve
}

function ips {
  step 'ips'

  printf "DNS records to create:\n"
  kubectl get gateways --all-namespaces -o json | jq '.items[] | {hostname: .spec.infrastructure.annotations."external-dns.alpha.kubernetes.io/hostname", ip: .status.addresses[0].value}'
  printf "\nPortainer LoadBalancer:\n"
  kubectl get svc -n portainer portainer-agent -o json | jq '.status.loadBalancer.ingress[0].ip'
}

function argo-login {
  step 'argo-login'

  printf "ArgoCD initial login:\n"
  password=`kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d`
  printf "admin:$password\n"
}

function vault-init {
  step 'vault-init'

  vault_status=`kubectl get pod -n vault vault-0 -o json | jq -r '.status.containerStatuses[0].ready'`

  if [[ $vault_status == 'true' ]]; then
    printf "Vault has already been initialized and is likely unsealed.\n"
    exit 1
  elif [[ $vault_status == 'false' ]]; then
    printf "Grabbing keys and unsealing vault...\n"
    mkdir -p ./secrets
    VAULT_UNSEAL_KEY_1=$(jq -rn ".unseal_keys_b64[0]" ./secrets/cluster-keys.json)
    VAULT_UNSEAL_KEY_2=$(jq -rn ".unseal_keys_b64[1]" ./secrets/cluster-keys.json)
    if [[ $VAULT_UNSEAL_KEY_1 == "null" ]] || [[ $VAULT_UNSEAL_KEY_2 == "null" ]]; then
      kubectl exec -n vault vault-0 -- vault operator init -key-shares=3 -key-threshold=2 -format=json > ./secrets/cluster-keys.json
      VAULT_UNSEAL_KEY_1=$(jq -r ".unseal_keys_b64[0]" ./secrets/cluster-keys.json)
      VAULT_UNSEAL_KEY_2=$(jq -r ".unseal_keys_b64[1]" ./secrets/cluster-keys.json)
    fi
    printf "\n [Unsealing with key 1]\n"
    kubectl exec -n vault vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY_1
    printf "\n [Unsealing with key 2]\n"
    kubectl exec -n vault vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY_2
    printf "\n\nVault has been unsealed!\n"
  else
    printf "Vault is not ready for unsealing. The Helm chart must be applied via Terraform.\n"
    exit 1
  fi
}

function vault-argo-plugin-init {
  step 'vault-argo-plugin-init'

  vault secrets enable kv-v2
  vault policy write argocd - <<EOF
path "kv/data/*" {
  capabilities = ["read"]
}
EOF
  vault auth enable kubernetes
  K8S_HOST="https://$( kubectl -n vault exec vault-0 -- env | grep KUBERNETES_PORT_443_TCP_ADDR| cut -f2 -d'='):443"
  SA_TOKEN=$(kubectl exec -n vault vault-0 -- cat /var/run/secrets/kubernetes.io/serviceaccount/token)
  SA_CERT=$(kubectl exec -n vault vault-0 -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt)

  vault write auth/kubernetes/config \
  token_reviewer_jwt=$SA_TOKEN \
  kubernetes_host=$K8S_HOST \
  kubernetes_ca_cert=$SA_CERT

  vault write auth/kubernetes/role/argocd \
  bound_service_account_names=argocd-repo-server \
  bound_service_account_namespaces=argocd \
  policies=argocd \
  ttl=48h

}

case $1 in
  plan)
    plan
    ;;
  apply)
    apply
    ;;
  ips)
    ips
    ;;
  vault-init)
    vault-init
    ;;
  argo-login)
    argo-login
    ;;
  helm-secrets-init)
    vault-argo-plugin-init
    ;;
  *)
    printf $"Usage: $0 {|plan|apply|vault-init|dns|argo-login|}\n"
    exit 1
    ;;
esac